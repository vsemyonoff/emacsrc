#!/usr/bin/env bash

# Homebrew install URL
BREW_INSTALL_URL="https://raw.githubusercontent.com/Homebrew/install/master/install"

# Common packages
COMM_PACKAGES=(
    cmake
    hunspell
    llvm
    python
    the_silver_searcher
)
# Arch packages
ARCH_PACKAGES=(
    "${COMM_PACKAGES[@]}"
    emacs
    npm
    python-pip
)
# Homebrew packages
BREW_PACKAGES=(
    "${COMM_PACKAGES[@]}"
    caskroom/cask/emacs
    node
    terminal-notifier
)

# Detect OS
SYSTEM="$(uname -s)"

# Pretend run: just print all commands without execution
[[ ${1} == "-p" ]] && PRETEND="echo"

case "${SYSTEM}" in
    Darwin)
        [[ -z "$(which brew)" ]] && ${PRETEND} /usr/bin/ruby -e "$(curl -fsSL ${BREW_INSTALL_URL})"
        for i in ${!BREW_PACKAGES[@]}; do
            if [[ "${BREW_PACKAGES[i]}" =~ ^caskroom/.* ]]; then
                BREW="brew install --force"
            else
                BREW="brew reinstall"
            fi
            ${PRETEND} ${BREW} ${BREW_PACKAGES[i]}
        done
        # Make python3 default for current user
        ${PRETEND} ln -sf /usr/local/bin/python3 ~/.bin/python
        ${PRETEND} ln -sf /usr/local/bin/pip3 ~/.bin/pip
        ;;

    Linux)
        [[ -z "$(which pacman)" ]] && echo "'pacman' not instaled, exiting..." && exit 1
        [[ ${ARCH_PACKAGES} ]] && ${PRETEND} sudo pacman -Sy --needed --noconfirm ${ARCH_PACKAGES[@]}
        ;;

    *)
        echo "error: unsupported system ${SYSTEM}"
        ;;
esac

# C/C++ 'compile_commands.json' generator:
#     make -j9 | compiledb
${PRETEND} pip install compiledb

# Python language server
${PRETEND} pip install 'python-language-server[all]'

# HTML language server
${PRETEND} npm i -g vscode-html-languageserver-bin

# Configure symlinks
SRC_DIR="$(cd $(dirname ${0})/.. && pwd)"
function clean_dst() {
    if [[ -e "${1}" ]]; then
        if [[ -h "${1}" || -L "${1}" ]]; then
            ${PRETEND} rm -v "${1}"
        elif [[ -d "${1}" || -f "${1}" ]]; then
            ${PRETEND} mv -v "${1}" "${1}.save"
        fi
    fi
}

# emcl
BIN_DIR="${HOME}/.bin" && ${PRETEND} mkdir -p "${BIN_DIR}"
clean_dst "${BIN_DIR}/emcl"
${PRETEND} ln -sv "${SRC_DIR}/bin/emcl" "${BIN_DIR}/emcl"

# init.el
EMACS_EL="${HOME}/.emacs.el"
clean_dst "${EMACS_EL}"
${PRETEND} ln -sv "${SRC_DIR}/init.el" "${EMACS_EL}"

# configs
CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}" && ${PRETEND} mkdir -p "${CONFIG_DIR}"
clean_dst "${CONFIG_DIR}/emacs"
${PRETEND} ln -sv "${SRC_DIR}/etc" "${CONFIG_DIR}/emacs"

# data
DATA_DIR="${XDG_DATA_HOME:-${HOME}/.local/share}" && ${PRETEND} mkdir -p "${DATA_DIR}"
clean_dst "${DATA_DIR}/emacs"
${PRETEND} ln -sv "${SRC_DIR}/share" "${DATA_DIR}/emacs"

# MacOS 'emacsclient' wrapper
if [[ "${SYSTEM}" == "Darwin" ]]; then
    APP_DIR="${HOME}/Applications" && ${PRETEND} mkdir -p "${APP_DIR}"
    clean_dst "${APP_DIR}/EmacsClient.app"
    ${PRETEND} ln -sv "${SRC_DIR}/share/apple/EmacsClient.app" "${APP_DIR}/EmacsClient.app"
fi

# Set environment vars
if [[ -z "${PRETEND}" ]]; then
    PROFILE_DIR="${HOME}/.profile.d" && mkdir -p "${PROFILE_DIR}"
    cat > "${PROFILE_DIR}/10-editor.sh.1" << EOF
# Set 'emacsclient' as default editor
EDITOR="emcl"
GIT_EDITOR="\${EDITOR} --no-fork"
SUDO_EDITOR="\${EDITOR} --no-fork"

export EDITOR GIT_EDITOR SUDO_EDITOR
EOF

    PATH_DIR="${PROFILE_DIR}/path.d" && mkdir -p "${PATH_DIR}"
    cat > "${PROFILE_DIR}/emacs.conf" << EOF
\${HOME}/.emacs.d/bin
EOF
fi
